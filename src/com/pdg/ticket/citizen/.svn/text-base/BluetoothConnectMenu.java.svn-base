package com.pdg.ticket.citizen;

import java.io.IOException;
import java.util.Vector;
import com.citizen.port.android.BluetoothPort;
import com.citizen.request.android.RequestHandler;
import com.pdg.ticket.R;
import com.pdg.ticket.StandarTicket;

import android.app.Activity;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

/**
 * BluetoothConnectMenu
 * @author Sung-Keun Lee
 * @version 2011. 4. 21.
 */
public class BluetoothConnectMenu extends Activity
{
	private static final String TAG = "BluetoothConnectMenu";
	// Intent request codes
	// private static final int REQUEST_CONNECT_DEVICE = 1;
    private static final int REQUEST_ENABLE_BT = 2;

	ArrayAdapter<String> adapter;
	private BluetoothAdapter mBluetoothAdapter;
	private Vector<BluetoothDevice> remoteDevices;
	private BroadcastReceiver searchFinish;
	private BroadcastReceiver searchStart;
	private BroadcastReceiver discoveryResult;
	public static Thread hThread;
	private static boolean connected;
	private Context context;
	// UI
	private Button searchButton;
	private ListView list;
	// BT
	public static BluetoothPort bp;
	
	/**
	 * Set up Bluetooth.
	 */
	private void bluetoothSetup()
	{
		// Initialize
		clearBtDevData();
		bp = BluetoothPort.getInstance();
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (mBluetoothAdapter == null) 
		{
		    // Device does not support Bluetooth
			return;
		}
		if (!mBluetoothAdapter.isEnabled()) 
		{
		    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
		    
		    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT); 
		}	
	}
	
	private void clearBtDevData()
	{
		remoteDevices = new Vector<BluetoothDevice>();
	}	
	
	// For the Desire Bluetooth close() bug.
	private void connectInit()
	{
		if(!mBluetoothAdapter.isEnabled())
		{
			mBluetoothAdapter.enable();
			try
			{
				Thread.sleep(3600);
			}
			catch(Exception e)
			{
				Log.e(TAG,e.getMessage(),e);
			}
		}
	}
	
	// Bluetooth Connection method.
	private void btConn(final BluetoothDevice btDev) throws IOException
	{
		new connTask().execute(btDev);
	}
	
/** ======================================================================= */	
	public class connTask extends AsyncTask<BluetoothDevice, Void, Integer>
	{
		private final ProgressDialog dialog = new ProgressDialog(BluetoothConnectMenu.this);
		
		@Override
		protected void onPreExecute()
		{
			dialog.setTitle("Bluetooth");
			dialog.setMessage("Connecting");
			dialog.show();
			super.onPreExecute();
		}
		
		@Override
		protected Integer doInBackground(BluetoothDevice... params)
		{
			Integer retVal = null;
			try
			{
				bp.connect(params[0]);
				retVal = new Integer(0);
			}
			catch (IOException e)
			{
				retVal = new Integer(-1);
			}
			return retVal;
		}
		
		@Override
		protected void onPostExecute(Integer result)
		{
			if(result.intValue() == 0)
			{
				RequestHandler rh = new RequestHandler();				
				hThread = new Thread(rh);
				hThread.start();
				connected = true;
				// UI
				list.setEnabled(false);
				searchButton.setEnabled(false);						
			}
			if(dialog.isShowing())
			{
				String cmsg;
				dialog.dismiss();
				if(connected)
				{
					Intent intent=new Intent(BluetoothConnectMenu.this,StandarTicket.class);
					setResult(Activity.RESULT_OK, intent);
					BluetoothConnectMenu.this.finish();
				}
				else
				{
					cmsg = "Bluetooth Not Connected.";
					AlertView.showError(cmsg, context);
				}
			}
			super.onPostExecute(result);
		}
	}
/** ============================================================================ */	
	
	private void btDisconn()
	{
		try
		{
			bp.disconnect();
			Thread.sleep(1200);
		}
		catch (Exception e)
		{
			Log.e(TAG, e.getMessage(), e);
		}
		
		if((hThread != null) && (hThread.isAlive()))
			hThread.interrupt();
		connected = false;
		// UI
		list.setEnabled(true);
		searchButton.setEnabled(true);
		Toast toast = Toast.makeText(context, "Bluetooth Disconnected", Toast.LENGTH_SHORT);
		toast.show();
	}

	/**
	 * Bluetooth connection status.
	 * @return connected - boolean
	 */
	public static boolean isConnected()
	{
		return connected;
	}
	
	public static void setConnected(boolean is){
		connected=is;
	}
//==================================================================================================//	
//==================================================================================================//	
	
	@Override
	protected void onDestroy()
	{
		super.onDestroy();	
		unregisterReceiver(searchFinish);
		unregisterReceiver(searchStart);
		unregisterReceiver(discoveryResult);
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.bluetooth_menu);
		// Setting
		bluetoothSetup();
		searchButton = (Button) findViewById(R.id.Button01);
		list = (ListView) findViewById(R.id.ListView01);
		context = this;	
		// Search Button
		searchButton.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				connectInit();
				if (!mBluetoothAdapter.isDiscovering())
				{	
					clearBtDevData();
					adapter.clear();
					mBluetoothAdapter.startDiscovery();	
				}
				else
				{	
					mBluetoothAdapter.cancelDiscovery();
				}
			}
		});				
		// Bluetooth Device List
		adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
		list.setAdapter(adapter);
		// Connect - 
		list.setOnItemClickListener(new OnItemClickListener()
		{
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3)
			{
				// TODO Auto-generated method stub
				BluetoothDevice btDev = remoteDevices.elementAt(arg2);
				connectInit();
				try
				{
					if(!mBluetoothAdapter.isDiscovering())
						btConn(btDev);
					else {
						mBluetoothAdapter.cancelDiscovery();
						btConn(btDev);
					}
				}
				catch (IOException e)
				{
					AlertView.showError(e.getMessage(), context);
					return;
				}
			}
		});
		
		// UI - Event Handler.
		// Search device, then add List.
		discoveryResult = new BroadcastReceiver() 
		{
			@Override
			public void onReceive(Context context, Intent intent) 
			{
				String key;
				BluetoothDevice remoteDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				if(remoteDevice != null)
				{
					key = remoteDevice.getName() +"\n["+remoteDevice.getAddress()+"]";
					
					remoteDevices.add(remoteDevice);
					adapter.add(key);
				}
			}
		};
		registerReceiver(discoveryResult, new IntentFilter(BluetoothDevice.ACTION_FOUND));
		searchStart = new BroadcastReceiver() 
		{
			@Override
			public void onReceive(Context context, Intent intent) 
			{
				searchButton.setText("Stop Searching Device");		
			}
		};
		registerReceiver(searchStart, new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_STARTED));
		searchFinish = new BroadcastReceiver() 
		{
			@Override
			public void onReceive(Context context, Intent intent) 
			{
				searchButton.setText("Search Device");				
			}
		};
		registerReceiver(searchFinish, new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED));
	}
}